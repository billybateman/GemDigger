package game.objects{	import game.data.*;	import game.text.*;	import game.utils.*;	import game.errors.*;	import game.events.*;	import game.effects.*;	import game.buttons.*;	import game.controllers.*;	import flash.net.*;	import flash.events.*;	import flash.display.*;	/**	 * Displays an error popup. The popup can be formatted during	 * the initialization phase of the game by setting the static	 * variables below. Otherwise the default values are used. These	 * are the elements of an error popup:	 * 	 * Error Title	: Displays the error number.	 * Error Text	: Displays the main error message.	 * Error Data	: Displays further details to describe the error.	 * Support Btn	: Takes the user to the customer support page.	 */	public class GameErrorPopUp extends MovieClip	{		private static var popUp:Sprite;		private static var screenBg:Shape;		private static var errorBg:GameErrorBg;		private static var title:GameErrorTitle;		private static var data:GameErrorData;		private static var error:GameErrorText;		private static var btn:CustomerSupportBtn;		private static var filterEffects:FilterEffects;		public static var alignTitle:String		= GameText.ALIGN_CENTER;		public static var alignText:String		= GameText.ALIGN_CENTER;		public static var alignData:String		= GameText.ALIGN_CENTER;		public static var fontTitle:String		= GameFont.FONT_ARIAL_BLACK;		public static var fontText:String		= GameFont.FONT_ARIAL_BLACK;		public static var fontData:String		= GameFont.FONT_ARIAL_BLACK;		public static var sizeTitle:uint		= 16;		public static var sizeText:uint			= 14;		public static var sizeData:uint			= 14;		public static var colorTitle:uint		= 0x990000;		public static var colorText:uint		= 0x000000;		public static var colorData:uint		= 0x000000;		public static var glowTitle:uint		= 0xFFFFFF;		public static var glowText:uint			= 0xFFFFFF;		public static var glowData:uint			= 0xFFFFFF;		public static var blurTitle:uint		= 2;		public static var blurText:uint			= 2;		public static var blurData:uint			= 2;		public static var widthTitle:Number		= 350;		public static var widthText:Number		= 350;		public static var widthData:Number		= 350;		public static var posTitleX:Number		= 30;		public static var posTitleY:Number		= 20;		public static var posTextX:Number		= 30;		public static var posTextY:Number		= 50;		public static var posDataX:Number		= 30;		public static var posDataY:Number		= 120;		public static var posBtnX:Number		= 130;		public static var posBtnY:Number		= 220;		public function GameErrorPopUp()		{		}		/**		 * Sets the Customer Support Button to be used in the error popup.		 * This is beneficial if different buttons need to be used for		 * different sites or languages. If the button is not set when		 * the error popup is created, the default button is used.		 * 		 * The customer support button must be defined in the main game and		 * preloader SWF files and must be of the class CustomerSupportBtn.		 */		public static function setButton( btn:CustomerSupportBtn ):void		{			GameErrorPopUp.btn = btn;		}		/**		 * Sets the background panel to be used in the error popup.		 * This is beneficial if different backgrounds need to be used		 * for different sites or languages. If the background is not		 * set when the error popup is created, a default background is used.		 * 		 * The background must be defined in the main game and preloader SWF		 * files and must be of the class GameErrorBg.		 */		public static function setBg( bg:GameErrorBg ):void		{			GameErrorPopUp.errorBg = bg;		}		/**		 * Shows the error popup. Sets the GameError.hasError variable to true.		 * The variable should be queried at various locations in the application		 * so the application will abort if an error occurred.		 */		public static function show( errorNo:String, errorTxt:String, errorData:String ):void		{			TraceUtil.addLine( 'GameErrorPopUp show() >>> ERROR #' + errorNo + ' msg:' + errorTxt + '; data:' + errorData );			GameError.hasError = true;			GameErrorPopUp.popUp = new Sprite();			GameErrorPopUp.create( errorNo, errorTxt, errorData );			GameData.stage.addChild( GameErrorPopUp.popUp );		}		private static function create( errorNo:String, errorTxt:String, errorData:String ):void		{			GameErrorPopUp.createScreenBg();			GameErrorPopUp.initErrorBg();			GameErrorPopUp.popUp.addChild( GameErrorPopUp.screenBg );			GameErrorPopUp.popUp.addChild( GameErrorPopUp.errorBg );			var dataLen:uint	= ( errorData.length > 350 ) ? 350 : errorData.length;			var errData:String	= unescape( errorData.substr( 0, dataLen ) );			//TraceUtil.addLine( 'GameErrorPopUp create() errorBg.x: ' + GameErrorPopUp.errorBg.x );			//TraceUtil.addLine( 'GameErrorPopUp create() errorBg.y: ' + GameErrorPopUp.errorBg.y );			//TraceUtil.addLine( 'GameErrorPopUp create() errorBg.width: ' + GameErrorPopUp.errorBg.width );			//TraceUtil.addLine( 'GameErrorPopUp create() errorBg.height: ' + GameErrorPopUp.errorBg.height );			//TraceUtil.addLine( 'GameErrorPopUp create() stage width: ' + GameData.stage.stageWidth );			//TraceUtil.addLine( 'GameErrorPopUp create() stage height: ' + GameData.stage.stageHeight );			//TraceUtil.addToStage();			GameErrorPopUp.title	= new GameErrorTitle( errorNo );			GameErrorPopUp.error	= new GameErrorText( errorNo, errorTxt );			GameErrorPopUp.data		= new GameErrorData( errorData );			if ( !GameErrorPopUp.btn ) GameErrorPopUp.btn = new CustomerSupportBtn();			GameErrorPopUp.btn.addEventListener( MouseEvent.MOUSE_DOWN, GameErrorPopUp.goToCustomerSupport );			GameErrorPopUp.errorBg.addChild( GameErrorPopUp.title );			GameErrorPopUp.errorBg.addChild( GameErrorPopUp.error );			GameErrorPopUp.errorBg.addChild( GameErrorPopUp.data );			GameErrorPopUp.errorBg.addChild( GameErrorPopUp.btn );			GameErrorPopUp.filterEffects = new FilterEffects();			GameErrorPopUp.filterEffects.setFilter( FilterEffects.TYPE_BEVEL );			GameErrorPopUp.filterEffects.setFilter( FilterEffects.TYPE_SHADOW, 'distance', '8' );			GameErrorPopUp.filterEffects.setFilter( FilterEffects.TYPE_SHADOW, 'blurX', '3' );			GameErrorPopUp.filterEffects.setFilter( FilterEffects.TYPE_SHADOW, 'blurY', '3' );			GameErrorPopUp.errorBg.filters = GameErrorPopUp.filterEffects.getFilters();		}		private static function createScreenBg():void		{			GameErrorPopUp.screenBg = new Shape();			GameErrorPopUp.screenBg.graphics.beginFill( 0xFFFFFF, 0.4 );			GameErrorPopUp.screenBg.graphics.drawRect( 0, 0, GameData.stage.stageWidth, GameData.stage.stageHeight );			GameErrorPopUp.screenBg.graphics.endFill();			var filterEffects:FilterEffects = new FilterEffects();			filterEffects.setFilter( FilterEffects.TYPE_BLUR, 'blurX', '2' );			filterEffects.setFilter( FilterEffects.TYPE_BLUR, 'blurY', '2' );			GameErrorPopUp.screenBg.filters = filterEffects.getFilters();		}		private static function initErrorBg():void		{			if ( !GameErrorPopUp.errorBg ) GameErrorPopUp.errorBg = new GameErrorBg();			GameErrorPopUp.errorBg.x = ( GameData.stage.stageWidth - GameErrorPopUp.errorBg.width ) / 2;			GameErrorPopUp.errorBg.y = ( GameData.stage.stageHeight - GameErrorPopUp.errorBg.height ) / 2;			if ( GameErrorPopUp.errorBg.x < 0 ) GameErrorPopUp.errorBg.x = 0;			if ( GameErrorPopUp.errorBg.y < 0 ) GameErrorPopUp.errorBg.y = 0;		}		private static function goToCustomerSupport( event:Event ):void		{			var request:URLRequest = new URLRequest( GameData.supportURL );			try {				navigateToURL( request, '_self' );			} catch ( error:Error ) {				TraceUtil.addLine( 'GameErrorPopUp goToCustomerSupport() ==> ERROR: ' + error.message );			}		}	}}