package game.text{	import fl.lang.*;	import flash.display.*;	import flash.events.*;	import flash.text.*;	import flash.filters.*;	import game.utils.*;	import game.effects.*;	public class GameText extends TextField	{		public static const ALIGN_LEFT:String		= 'left';		public static const ALIGN_RIGHT:String		= 'right';		public static const ALIGN_CENTER:String		= 'center';		private var font:String;		private var format:TextFormat;		private var filterEffects:FilterEffects;		public function GameText( size:uint, color:uint, font:String, align:String, leading:int=0, letterSpacing:Number=0 ):void		{			this.format = new TextFormat();					this.font = GameFont.getFont( font );			switch ( align ) {				case ALIGN_LEFT		:	this.format.align = TextFormatAlign.LEFT;	break;				case ALIGN_RIGHT	:	this.format.align = TextFormatAlign.RIGHT;	break;				case ALIGN_CENTER	:	this.format.align = TextFormatAlign.CENTER;	break;				default				:	this.format.align = TextFormatAlign.LEFT;			}			this.format.font			= this.font;			this.format.size			= size;			this.format.color			= color;			this.format.leading			= leading;			this.format.letterSpacing	= letterSpacing;			this.defaultTextFormat		= this.format;			this.embedFonts				= true;			this.wordWrap				= true;			this.selectable				= false;			switch ( align ) {				case ALIGN_LEFT		:	this.autoSize = TextFieldAutoSize.LEFT;		break;				case ALIGN_RIGHT	:	this.autoSize = TextFieldAutoSize.RIGHT;	break;				case ALIGN_CENTER	:	this.autoSize = TextFieldAutoSize.CENTER;	break;				default				:	this.autoSize = TextFieldAutoSize.LEFT;			}			this.antiAliasType		= AntiAliasType.ADVANCED;			this.filterEffects		= new FilterEffects();		}		public function setText( text:String, isLocaleID:Boolean = false ):void		{			TraceUtil.addLine( 'GameText  constructor:' + text + ':' + isLocaleID );						if ( isLocaleID ) {				this.text = Locale.loadString( text );			} else {				this.text = text;			}			this.setTextFormat( this.format );		}		public function setColor( color:uint ):void		{			this.format.color = color;			this.setTextFormat( this.format );		}		public function setFilter( type:String, property:String = '', value:String = '' ):void		{			this.filterEffects.setFilter( type, property, value );		}		public function activateFilters():void		{			this.filters = this.filterEffects.getFilters();		}	}}