package controllers{	import data.*;	import game.utils.*;	import game.controllers.*;		public class ConfigController extends GameConfigurator	{		private static const _instance:ConfigController = new ConfigController( Lock );		public function ConfigController( lock:Class )		{			// Verify that the lock is the correct class reference.			if ( lock == Lock ) {				super();			} else {				throw new Error( 'Invalid singleton instantiation attempt.' );			}		}		public static function get instance():ConfigController		{			return _instance;		}		/**		 * Overrides the GameConfigurator setData() method to process		 * the intial game, score, and board data from the server.		 */		override protected function setData():void		{			MainData.setData();		}	}}/** * This is a private class declared outside of the package * that is only accessible to classes inside of this * file.  Because of that, no outside code is able to get a * reference to this class to pass to the constructor, which * enables us to prevent outside instantiation. */class Lock {}