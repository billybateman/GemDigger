package objects {		import scenes.*;	import objects.gems.*;		import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.text.TextField;	import flash.text.*;		public class Board extends Sprite {				private var gemArray:Array=new Array();		private var g:Sprite;		private var s:Sprite=new Sprite();		private var pr:int=-10;		private var pc:int=-10;		private var cl:Array=new Array(0xFF0000,0xFF00,0xFF,0XFFFF00,0xFF00FF,0xFFFF,0xFFFFFF);		private var cp:Boolean=false;		private var ts:TextField=new TextField();		private var th:TextField=new TextField();		private var sc:uint=0;		private var m:uint=0;		public function Board() {						trace('Board >>> constructor');						addChild(ts);			var format:TextFormat = new TextFormat();			format.size = 26;			ts.setTextFormat(format);			ts.textColor=0xFFFFFF;			ts.x=10;			ts.y=10;									addChild(th);			th.setTextFormat(format);			th.x=0;			th.y=0;									/*			for (var i:uint=0; i<8; i++) {				gemArray[i]=new Array();				for (var j:uint=0; j<8; j++) {					do {						gemArray[i][j]=Math.floor(Math.random()*7);					} while (rk(i,j)>2||ck(i,j)>2);															trace('Board >>> loop adding color' + cl[gemArray[i][j]]);										addGem(cl[gemArray[i][j]], i+"_"+j, j*53, i*53);														}			}			*/						addChild(s);			s.graphics.lineStyle(2,0xff0000,1);			s.graphics.drawRect(0,0,53,53);			s.visible=false;											}				public function setupGems():void		{			for (var i:uint=0; i<8; i++) {				gemArray[i]=new Array();				for (var j:uint=0; j<8; j++) {					do {						gemArray[i][j]=Math.floor(Math.random()*7);					} while (rk(i,j)>2||ck(i,j)>2);															trace('Board >>> loop adding color' + cl[gemArray[i][j]]);										addGem(cl[gemArray[i][j]], i+"_"+j, j*53, i*53);														}			}						addEventListener(MouseEvent.CLICK,ci);			addEventListener(Event.ENTER_FRAME,enterFrame);		}				private function addGem(color:uint, name:String, j:uint, i:uint):void		{			 				switch(color){				case 65280:						var gemGreen:GreenGem = new GreenGem();						gemGreen.color = color;						gemGreen.name = name;						gemGreen.x = j;						gemGreen.y = i;						addChild(gemGreen);				break;				case 16776960:						var gemYellow:YellowGem = new YellowGem();						gemYellow.color = color;						gemYellow.name = name;						gemYellow.x = j;						gemYellow.y = i;						addChild(gemYellow);				break;				case 16711935:						var gemPurple:PurpleGem = new PurpleGem();						gemPurple.color = color;						gemPurple.name = name;						gemPurple.x = j;						gemPurple.y = i;						addChild(gemPurple);				break;				case 16777215:					var gemWhite:WhiteGem = new WhiteGem();						gemWhite.color = color;						gemWhite.name = name;						gemWhite.x = j;						gemWhite.y = i;						addChild(gemWhite);				break;				case 65535:						var gemLightBlue:LightBlueGem = new LightBlueGem();						gemLightBlue.color = color;						gemLightBlue.name = name;						gemLightBlue.x = j;						gemLightBlue.y = i;						addChild(gemLightBlue);				break;				case 255:					var gemBlue:BlueGem = new BlueGem();						gemBlue.color = color;						gemBlue.name = name;						gemBlue.x = j;						gemBlue.y = i;						addChild(gemBlue);				break;				case 16711680:					var gemRed:RedGem = new RedGem();						gemRed.color = color;						gemRed.name = name;						gemRed.x = j;						gemRed.y = i;						addChild(gemRed);				break;			}					}				private function enterFrame(e:Event):void {			var f:Boolean=false;			for (var i:int=6; i>=0; i--) {				for (var j:uint=0; j<8; j++) {					if (gemArray[i][j]!=-1&&gemArray[i+1][j]==-1) {						f=true;						gemArray[i+1][j]=gemArray[i][j];						gemArray[i][j]=-1;						getChildByName(i+"_"+j).y+=53;						getChildByName(i+"_"+j).name=(i+1)+"_"+j;						break;					}				}				if (f) {					break;				}			}			if (! f) {				var h:Boolean=false;				for (i=7; i>=0; i--) {					for (j=0; j<8; j++) {						if (gemArray[i][j]==-1) {							h=true;							gemArray[0][j]=Math.floor(Math.random()*7);														MainScene.updateScore(10);														addGem(cl[gemArray[0][j]], "0_"+j, j*53, 0);																					break;						}					}					if (h) {						break;					}				}				if (! h) {					var r:Boolean=false;					for (i=7; i>=0; i--) {						for (j=0; j<8; j++) {							if (rk(i,j)>2||ck(i,j)>2) {								r=true;								var tr:Array=[i+"_"+j];								var u:uint=gemArray[i][j];								var t:int;								if (rk(i,j)>2) {									t=j;									while (chk(u,i,t-1)) {										t--;										tr.push(i+"_"+t);									}									t=j;									while (chk(u,i,t+1)) {										t++;										tr.push(i+"_"+t);									}								}								if (ck(i,j)>2) {									t=i;									while (chk(u,t-1,j)) {										t--;										tr.push(t+"_"+j);									}									t=i;									while (chk(u,t+1,j)) {										t++;										tr.push(t+"_"+j);									}								}								for (i=0; i<tr.length; i++) {									removeChild(getChildByName(tr[i]));									var cd:Array=tr[i].split("_");									gemArray[cd[0]][cd[1]]=-1;									sc+=m;									m++;								}								break;							}						}						if (r) {							break;						}					}					if (! r) {						cp=true;						m=0;					}				}			}			ts.text=sc.toString();		}		private function ci(e:MouseEvent):void {			if (cp) {				if (mouseX<800&&mouseX>0&&mouseY<600&&mouseY>0) {					var sr:uint=Math.floor(mouseY/53);					var sc:uint=Math.floor(mouseX/53);					if (!(((sr==pr+1||sr==pr-1)&&sc==pc)||((sc==pc+1||sc==pc-1)&&sr==pr))) {						pr=sr;						pc=sc;						s.x=53*pc;						s.y=53*pr;						s.visible=true;					} else {						swp(pr,pc,sr,sc);						if (rk(pr,pc)>2||ck(pr,pc)>2||rk(sr,sc)>2||ck(sr,sc)>2) {							th.text="";							cp=false;							getChildByName(pr+"_"+pc).x=sc*53;							getChildByName(pr+"_"+pc).y=sr*53;							getChildByName(pr+"_"+pc).name="t";							getChildByName(sr+"_"+sc).x=pc*53;							getChildByName(sr+"_"+sc).y=pr*53;							getChildByName(sr+"_"+sc).name=pr+"_"+pc;							getChildByName("t").name=sr+"_"+sc;						} else {							swp(pr,pc,sr,sc);						}						pr=-10;						pc=-10;						s.visible=false;					}				} else {									}			}						for (var i:uint=0; i<8; i++) {				for (var j:uint=0; j<8; j++) {					if (i<7) {						swp(i,j,i+1,j);						if ((rk(i,j)>2||ck(i,j)>2||rk(i+1,j)>2||ck(i+1,j)>2)) {							th.text = i.toString()+","+j.toString()+"->"+(i+1).toString()+","+j.toString();						}						swp(i,j,i+1,j);					}					if (j<7) {						swp(i,j,i,j+1);						if ((rk(i,j)>2||ck(i,j)>2||rk(i,j+1)>2||ck(i,j+1)>2) ) {							th.text = i.toString()+","+j.toString()+"->"+(i).toString()+","+(j+1).toString();						}						swp(i,j,i,j+1);					}				}			}		}				private function hint():void {			for (var i:uint=0; i<8; i++) {				for (var j:uint=0; j<8; j++) {					if (i<7) {						swp(i,j,i+1,j);						if ((rk(i,j)>2||ck(i,j)>2||rk(i+1,j)>2||ck(i+1,j)>2)) {							th.text = i.toString()+","+j.toString()+"->"+(i+1).toString()+","+j.toString();						}						swp(i,j,i+1,j);					}					if (j<7) {						swp(i,j,i,j+1);						if ((rk(i,j)>2||ck(i,j)>2||rk(i,j+1)>2||ck(i,j+1)>2) ) {							th.text = i.toString()+","+j.toString()+"->"+(i).toString()+","+(j+1).toString();						}						swp(i,j,i,j+1);					}				}			}					}		private function swp(r1:uint,c1:uint,r2:uint,c2:uint):void {			var t:uint=gemArray[r1][c1];			gemArray[r1][c1]=gemArray[r2][c2];			gemArray[r2][c2]=t;					}		private function rk(r:uint,c:uint):uint {			var u:uint=gemArray[r][c];			var stk:uint=1;			var t:int=c;			while (chk(u,r,t-1)) {				t--;				stk++;			}			t=c;			while (chk(u,r,t+1)) {				t++;				stk++;			}			return (stk);		}		private function ck(r:uint,c:uint):uint {			var u:uint=gemArray[r][c];			var stk:uint=1;			var t:int=r;			while (chk(u,t-1,c)) {				t--;				stk++;			}			t=r;			while (chk(u,t+1,c)) {				t++;				stk++;			}			return (stk);		}		private function chk(g:uint,r:int,c:int):Boolean {			if (gemArray[r]==null) {				return false;			}			if (gemArray[r][c]==null) {				return false;			}			return g==gemArray[r][c];		}	}}